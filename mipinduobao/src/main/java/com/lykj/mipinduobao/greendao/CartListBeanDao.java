package com.lykj.mipinduobao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lykj.mipinduobao.bean.CartListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CART_LIST_BEAN".
*/
public class CartListBeanDao extends AbstractDao<CartListBean, Long> {

    public static final String TABLENAME = "CART_LIST_BEAN";

    /**
     * Properties of entity CartListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Thumb = new Property(1, String.class, "thumb", false, "THUMB");
        public final static Property Qishu = new Property(2, String.class, "qishu", false, "QISHU");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Zongrenshu = new Property(4, String.class, "zongrenshu", false, "ZONGRENSHU");
        public final static Property Canyurenshu = new Property(5, String.class, "canyurenshu", false, "CANYURENSHU");
        public final static Property Shenyurenshu = new Property(6, String.class, "shenyurenshu", false, "SHENYURENSHU");
        public final static Property Yunjiage = new Property(7, String.class, "yunjiage", false, "YUNJIAGE");
        public final static Property Num = new Property(8, int.class, "num", false, "NUM");
    }


    public CartListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CartListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CART_LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"THUMB\" TEXT," + // 1: thumb
                "\"QISHU\" TEXT," + // 2: qishu
                "\"TITLE\" TEXT," + // 3: title
                "\"ZONGRENSHU\" TEXT," + // 4: zongrenshu
                "\"CANYURENSHU\" TEXT," + // 5: canyurenshu
                "\"SHENYURENSHU\" TEXT," + // 6: shenyurenshu
                "\"YUNJIAGE\" TEXT," + // 7: yunjiage
                "\"NUM\" INTEGER NOT NULL );"); // 8: num
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CART_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CartListBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(2, thumb);
        }
 
        String qishu = entity.getQishu();
        if (qishu != null) {
            stmt.bindString(3, qishu);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String zongrenshu = entity.getZongrenshu();
        if (zongrenshu != null) {
            stmt.bindString(5, zongrenshu);
        }
 
        String canyurenshu = entity.getCanyurenshu();
        if (canyurenshu != null) {
            stmt.bindString(6, canyurenshu);
        }
 
        String shenyurenshu = entity.getShenyurenshu();
        if (shenyurenshu != null) {
            stmt.bindString(7, shenyurenshu);
        }
 
        String yunjiage = entity.getYunjiage();
        if (yunjiage != null) {
            stmt.bindString(8, yunjiage);
        }
        stmt.bindLong(9, entity.getNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CartListBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(2, thumb);
        }
 
        String qishu = entity.getQishu();
        if (qishu != null) {
            stmt.bindString(3, qishu);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String zongrenshu = entity.getZongrenshu();
        if (zongrenshu != null) {
            stmt.bindString(5, zongrenshu);
        }
 
        String canyurenshu = entity.getCanyurenshu();
        if (canyurenshu != null) {
            stmt.bindString(6, canyurenshu);
        }
 
        String shenyurenshu = entity.getShenyurenshu();
        if (shenyurenshu != null) {
            stmt.bindString(7, shenyurenshu);
        }
 
        String yunjiage = entity.getYunjiage();
        if (yunjiage != null) {
            stmt.bindString(8, yunjiage);
        }
        stmt.bindLong(9, entity.getNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CartListBean readEntity(Cursor cursor, int offset) {
        CartListBean entity = new CartListBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // thumb
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // qishu
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zongrenshu
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // canyurenshu
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shenyurenshu
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // yunjiage
            cursor.getInt(offset + 8) // num
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CartListBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setThumb(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQishu(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZongrenshu(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCanyurenshu(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShenyurenshu(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setYunjiage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNum(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CartListBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CartListBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CartListBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
